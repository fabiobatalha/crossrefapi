[project]
name = "crossrefapi"
version = "1.7.0"
description = "Library that implements the endpoints of the Crossref API"
authors = [
    {name = "Fabio Batalha", email = "fabio.batalha@loto-quebec.com"}
]
license = {text = "BSD 2-Clause License"}
readme = "README.rst"
requires-python = ">=3.11"
dependencies = [
    "urllib3 (==2.5.0)",
    "requests (>=2.32.4,<3.0.0)"
]

[tool.poetry]
packages = [
  { include = "crossref",  from="./src"}
]

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.group.dev.dependencies]
pytest = "^8"
ruff = "^0"
pre-commit = "^4"
ipython = "^9"
black = "^25"

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = ""

[tool.ruff]
line-length = 100


[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "B",  # flake8-bugbear
    "W",  # pycodestyle warnings
    "N",  # pep8 naming
    "D419", "D300", "D301", "D419",  # pydocstyle
    "UP",  # pyupgrade
    "YTT",  # flake-2020
    "S",  #  flake8-bandit
    "BLE",  # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "A",  # flake8-builtins
    "COM",  # flake8-commas
    "C4",  # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "EM",  # flake8-errmsg
    "EXE",  # flake8-executable
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",  # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PT",  # flake8-pytest-style
    "Q",  # flake8-quotes
    "RET", # flake8-return
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking -> maybe
    "ARG",  # flake8-unused-arguments -> No, doesn't work with pytest, django, celery...
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate -> No
    "PGH",  # pygrep-hooks
    "PL",  # pylint
    "TRY",  # tryceratops
    "RSE",  # flake8-raise
    "RUF",  # ruff-specific
    "C90",  # mccabe for cyclomatic complexity -> maybe
    "I",  # isort
]

ignore = [
    "COM812",
    "FBT002", # Boolean in methods parameters with default value
    "FBT001", # Boolean in methods parameters
]
# Ignore S101 in test files:
per-file-ignores = { "tests/**/*.py" = ["S101"] }